-- Push Enrollments Market Specific
-- Columns: Note that CREATEDATE from the DIM_USERS tables needs to be updated before being put into use
/* country, 
    platform, 
    push_enrollment_percent_today, 
    push_enrollment_percent_current_month, 
    push_enrollment_percent_last_month, 
    ush_enrollment_percent_last_2_months
*/


WITH all_users AS(
SELECT 'AR' AS COUNTRY,'Argentina' AS COUNTRY_FN, * FROM WH.SEGMENT.DIM_AR_USERS
UNION ALL
SELECT 'BR' AS COUNTRY,'Brazil' AS COUNTRY_FN, * FROM WH.SEGMENT.DIM_BR_USERS
UNION ALL
SELECT 'CO' AS COUNTRY,'Colombia' AS COUNTRY_FN, * FROM WH.SEGMENT.DIM_CO_USERS
UNION ALL
SELECT 'DO' AS COUNTRY,'Dominican Republic' AS COUNTRY_FN, * FROM WH.SEGMENT.DIM_DO_USERS
UNION ALL
SELECT 'EC' AS COUNTRY,'Ecuador' AS COUNTRY_FN, * FROM WH.SEGMENT.DIM_EC_USERS
UNION ALL
SELECT 'MX' AS COUNTRY,'Mexico' AS COUNTRY_FN, * FROM WH.SEGMENT.DIM_MX_USERS
UNION ALL
SELECT 'PA' AS COUNTRY,'Panama' AS COUNTRY_FN, * FROM WH.SEGMENT.DIM_PA_USERS
UNION ALL
SELECT 'PE' AS COUNTRY,'Peru' AS COUNTRY_FN, * FROM WH.SEGMENT.DIM_PE_USERS
UNION ALL
SELECT 'PY' AS COUNTRY,'Paraguay' AS COUNTRY_FN, * FROM WH.SEGMENT.DIM_PY_USERS
UNION ALL
SELECT 'ZA' AS COUNTRY,'South Africa' AS COUNTRY_FN, * FROM WH.SEGMENT.DIM_ZA_USERS
),
  
USERS AS 
(
SELECT DISTINCT CASE
            WHEN COUNTRY = 'Argentina' THEN 'AR'
            WHEN COUNTRY = 'Brazil' THEN 'BR'
            WHEN COUNTRY = 'Colombia' THEN 'CO'
            WHEN COUNTRY = 'Dominican Republic' THEN 'DO'
            WHEN COUNTRY = 'Ecuador' THEN 'EC'
            WHEN COUNTRY = 'Mexico' THEN 'MX'
            WHEN COUNTRY = 'Panama' THEN 'PA'
            WHEN COUNTRY = 'Peru' THEN 'PE'
            WHEN COUNTRY = 'Paraguay' THEN 'PY'
            WHEN COUNTRY = 'South Africa' THEN 'ZA'
            END COUNTRY,
                USER_ID, 
         DAY
  FROM WH.ANALYTICS.T_GLOBAL_ACTIVE_USERS
         WHERE DAY = CURRENT_DATE -1
),


 USER_INFO AS 

(
SELECT A.COUNTRY
    ,A.USER_ID
    ,DAY
    ,DEVICE_TYPE AS PLATFORM
FROM USERS A
-- Joins with USER table to get Platform info
JOIN ALL_USERS B 
    ON A.USER_ID = B.USER_ID
    AND A.COUNTRY = B.COUNTRY
WHERE PLATFORM <> 'Web'
),  
  
---Select users that have received a push since 30 days before the first day of 2 months ago

push_users AS (
SELECT DISTINCT 'AR' AS country,
    RECEIVED_AT AS "DATE",
    platform,
    user_id
FROM SEGMENT_EVENTS.BRAZE_AR.PUSH_NOTIFICATION_SENT
    WHERE RECEIVED_AT BETWEEN DATEADD(DAY, -30, DATE_TRUNC(DAY, CURRENT_DATE)) AND CURRENT_DATE -1
  
UNION ALL
SELECT DISTINCT 'BR' AS country,
    RECEIVED_AT AS "DATE",
    platform,
    user_id
FROM SEGMENT_EVENTS.BRAZE_BR.PUSH_NOTIFICATION_SENT
    WHERE RECEIVED_AT BETWEEN DATEADD(DAY, -30, DATE_TRUNC(DAY, CURRENT_DATE)) AND CURRENT_DATE -1
  
UNION ALL
SELECT DISTINCT 'CO' AS country,
    RECEIVED_AT AS "DATE",
    platform,
    user_id
FROM SEGMENT_EVENTS.BRAZE_CO.PUSH_NOTIFICATION_SENT
    WHERE RECEIVED_AT BETWEEN DATEADD(DAY, -30, DATE_TRUNC(DAY, CURRENT_DATE)) AND CURRENT_DATE -1
  
UNION ALL
SELECT DISTINCT 'DO' AS country,
    RECEIVED_AT AS "DATE",
    platform,
    user_id
FROM SEGMENT_EVENTS.BRAZE.PUSH_NOTIFICATION_SENT
    WHERE RECEIVED_AT BETWEEN DATEADD(DAY, -30, DATE_TRUNC(DAY, CURRENT_DATE)) AND CURRENT_DATE -1
  
UNION ALL
SELECT DISTINCT 'EC' AS country,
    RECEIVED_AT AS "DATE",
    platform,
    user_id
FROM SEGMENT_EVENTS.BRAZE_EC.PUSH_NOTIFICATION_SENT
    WHERE RECEIVED_AT BETWEEN DATEADD(DAY, -30, DATE_TRUNC(DAY, CURRENT_DATE)) AND CURRENT_DATE -1
  
UNION ALL
SELECT DISTINCT 'MX' AS country,
    RECEIVED_AT AS "DATE",
    platform,
    user_id
FROM SEGMENT_EVENTS.BRAZE_MX.PUSH_NOTIFICATION_SENT
    WHERE RECEIVED_AT BETWEEN DATEADD(DAY, -30, DATE_TRUNC(DAY, CURRENT_DATE)) AND CURRENT_DATE -1

UNION ALL
SELECT DISTINCT 'PA' AS country,
    RECEIVED_AT AS "DATE",
    platform,
    user_id
FROM SEGMENT_EVENTS.BRAZE_PA.PUSH_NOTIFICATION_SENT
    WHERE RECEIVED_AT BETWEEN DATEADD(DAY, -30, DATE_TRUNC(DAY, CURRENT_DATE)) AND CURRENT_DATE -1  
  
  
UNION ALL
SELECT DISTINCT 'PE' AS country,
    RECEIVED_AT AS "DATE",
    platform,
    user_id
FROM SEGMENT_EVENTS.BRAZE_PE.PUSH_NOTIFICATION_SENT
    WHERE RECEIVED_AT BETWEEN DATEADD(DAY, -30, DATE_TRUNC(DAY, CURRENT_DATE)) AND CURRENT_DATE -1

UNION ALL
SELECT DISTINCT 'PY' AS country,
    RECEIVED_AT AS "DATE",
    platform,
    user_id
FROM SEGMENT_EVENTS.BRAZE_PY.PUSH_NOTIFICATION_SENT
    WHERE RECEIVED_AT BETWEEN DATEADD(DAY, -30, DATE_TRUNC(DAY, CURRENT_DATE)) AND CURRENT_DATE -1
 
UNION ALL
SELECT DISTINCT 'ZA' AS country,
    RECEIVED_AT AS "DATE",
    platform,
    user_id
FROM SEGMENT_EVENTS.BRAZE_ZA.PUSH_NOTIFICATION_SENT
    WHERE RECEIVED_AT BETWEEN DATEADD(DAY, -30, DATE_TRUNC(DAY, CURRENT_DATE)) AND CURRENT_DATE -1
)

-- transform push users- joining in platform to filter out users that have multiple platforms
,push_users2 AS (
SELECT P.country,
  "DATE",
  P.platform,
  P.user_id
FROM push_users P
JOIN USER_INFO U
  ON U.USER_ID = P.USER_ID
  AND U.COUNTRY = P.COUNTRY
  AND U.PLATFORM = P.PLATFORM
) 

-- union of the 4 rows of each country/platform: today, actual month, last month and 2 months ago

, PUSH_ENABLED_AGG AS 
(
  -- L30D related to yesterday
  SELECT CURRENT_DATE AS TIMEFRAME,  COUNTRY, PLATFORM, COUNT(DISTINCT USER_ID) AS USERS FROM push_users2
  WHERE "DATE" BETWEEN CURRENT_DATE -31 AND CURRENT_DATE -1 
  GROUP BY COUNTRY, PLATFORM
) 

-- country, user, day from T_GLOBAL_ACTIVE_USERS
, 

-- total user aggregation
 TOTAL_USER_AGG AS 
(
SELECT CURRENT_DATE AS TIMEFRAME,  COUNTRY, PLATFORM, COUNT(DISTINCT USER_ID) AS USERS
FROM USER_INFO
WHERE DAY = CURRENT_DATE - 1
GROUP BY COUNTRY, PLATFORM
),

--------------------------------------------------------------------------------------------------

AGG AS (
SELECT A.TIMEFRAME, A.COUNTRY, A.PLATFORM, A."USERS"  AS PUSH_ENROLLED, 
B."USERS" AS REGISTERED_USERS 
FROM PUSH_ENABLED_AGG A
JOIN TOTAL_USER_AGG B
    ON A.TIMEFRAME = B.TIMEFRAME
    AND A.COUNTRY = B.COUNTRY
    AND A.PLATFORM = B.PLATFORM
)
SELECT TIMEFRAME,COUNTRY, 'Total' AS PLATFORM,
    SUM(PUSH_ENROLLED) AS PUSH_ENROLLED,
    SUM(REGISTERED_USERS) AS REGISTERED_USERS
FROM AGG
GROUP BY TIMEFRAME, COUNTRY

UNION ALL
SELECT TIMEFRAME, COUNTRY, PLATFORM,
    SUM(PUSH_ENROLLED) AS PUSH_ENROLLED,
    SUM(REGISTERED_USERS) AS REGISTERED_USERS
FROM AGG
GROUP BY TIMEFRAME, COUNTRY, PLATFORM
