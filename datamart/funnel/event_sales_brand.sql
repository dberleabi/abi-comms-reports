WITH CAMPAIGN_DETAILS AS (
SELECT COUNTRY,
  CAMPAIGN_ID,
  NAME AS CAMPAIGN_NAME,
  CAMPAIGN_TYPE,
  BRAND
FROM WH.DATAMARTS_DIGITAL_COMMS.DIM_GLOBAL_CAMPAIGN_TYPES T
WHERE CAMPAIGN_TYPE = 'Sales'
)
  
--Sends CTE: Select Campaign ID, and event info
--Filter to events where the Campaign ID is in Details CTE
,SENDS AS (
SELECT DISTINCT S.COUNTRY,
    S.CHANNEL,
    S.CAMPAIGN_ID,
    D.CAMPAIGN_NAME,
    D.CAMPAIGN_TYPE,
    D.BRAND,
    S.ID AS SEND_ID,
    S.USER_ID,
    S.POC_ID,
    S.RECEIVED_AT AS IMPRESSION_TIME
FROM WH.DM_DIGITAL_COMMS.TRACKS_GLOBAL_MESSAGES S
JOIN CAMPAIGN_DETAILS D
    ON S.COUNTRY = D.COUNTRY
    AND S.CAMPAIGN_ID = D.CAMPAIGN_ID
WHERE EVENT IN ('in_app_message_viewed', 'push_notification_sent')
  AND IMPRESSION_TIME >= DATEADD('DAY', -31, CURRENT_DATE)
)
,
  
--Clicks CTE: Select click events 
CLICKS AS (
SELECT DISTINCT C.COUNTRY,
    C.CHANNEL,
    C.CAMPAIGN_ID,
    D.CAMPAIGN_NAME,
    D.CAMPAIGN_TYPE,
    D.BRAND,
    C.ID AS CLICK_ID,
    C.USER_ID,
    C.POC_ID,
    C.RECEIVED_AT AS CLICK_TIME
FROM WH.DM_DIGITAL_COMMS.TRACKS_GLOBAL_MESSAGES C
JOIN CAMPAIGN_DETAILS D
    ON C.COUNTRY = D.COUNTRY
    AND C.CAMPAIGN_ID = D.CAMPAIGN_ID
WHERE EVENT IN ('in_app_message_clicked', 'push_notification_tapped')
  AND CLICK_TIME >= DATEADD('DAY', -31, CURRENT_DATE)
)
,
  
--Join Sends and Clicks together on Country, Campaign ID, Channel, User ID
--Use a CASE WHEN statement to print Click IDs where the difference in event times are positive
CLICKS_JOINED AS (
SELECT DISTINCT A.COUNTRY,
    A.CAMPAIGN_ID,
    A.CAMPAIGN_NAME,
    A.CAMPAIGN_TYPE,    
    A.CHANNEL,
    A.BRAND,
    A.USER_ID,
    A.POC_ID,
    SEND_ID,
    IMPRESSION_TIME,
    CASE WHEN DATEDIFF(second, IMPRESSION_TIME, CLICK_TIME) >= 0 THEN CLICK_ID ELSE NULL END AS CLICK_ID,
    CASE WHEN DATEDIFF(second, IMPRESSION_TIME, CLICK_TIME) >= 0 THEN CLICK_TIME ELSE NULL END AS CLICK_TIME,
    CASE WHEN DATEDIFF(second, IMPRESSION_TIME, CLICK_TIME) >= 0 THEN A.USER_ID ELSE NULL END AS CLICK_USER_ID,
    CASE WHEN DATEDIFF(second, IMPRESSION_TIME, CLICK_TIME) >= 0 THEN A.POC_ID ELSE NULL END AS CLICK_POC_ID,
    CASE WHEN DATEDIFF(second, IMPRESSION_TIME, CLICK_TIME) >= 0 THEN DATEDIFF(second, IMPRESSION_TIME, CLICK_TIME)/60 ELSE NULL END AS MIN_DIFF_CLICK
FROM SENDS A
LEFT JOIN CLICKS B
    ON A.COUNTRY = B.COUNTRY
    AND A.USER_ID = B.USER_ID
    AND A.CHANNEL = B.CHANNEL
    AND A.CAMPAIGN_ID = B.CAMPAIGN_ID
) 
,

-- Create a CTE with the Product Add events
-- Select: COUNTRY, EVENT ID, USER_ID, POC_ID, BRAND, RECEIVED_AT
PRODUCT_ADDED AS (
SELECT COUNTRY,
    PRODUCT_ADDED_ID,
    POC_ID,
    USER_ID, 
    LOWER(BRAND) AS L_BRAND,
    --PRODUCT_SKU,
    RECEIVED_AT AS PRODUCT_ADDED_TIME 
FROM WH.DATAMARTS_DIGITAL_COMMS.FACT_GLOBAL_PRODUCT_ADDED
WHERE QUANTITY_ADDED > 0
    AND QUANTITY_ADDED IS NOT NULL
    AND PRODUCT_ADDED_TIME >= DATEADD('DAY', -31, CURRENT_DATE)
)
,PRODUCT_ADDED_48H AS (
SELECT DISTINCT A.COUNTRY,
    CHANNEL,
    CAMPAIGN_ID,
    CAMPAIGN_NAME,
    CAMPAIGN_TYPE,
    A.USER_ID,
    A.CLICK_USER_ID,
    A.POC_ID,
    A.CLICK_POC_ID,
    SEND_ID,
    CLICK_ID,
    IMPRESSION_TIME,
    CLICK_TIME,
    CASE WHEN DATEDIFF(second, IMPRESSION_TIME, PRODUCT_ADDED_TIME)/60 BETWEEN 0 AND 2880 THEN PRODUCT_ADDED_TIME ELSE NULL END AS PRODUCT_ADDED_TIME,
    CASE WHEN DATEDIFF(second, IMPRESSION_TIME, PRODUCT_ADDED_TIME)/60 BETWEEN 0 AND 2880 THEN PRODUCT_ADDED_ID ELSE NULL END AS PRODUCT_ADDED_ID,
    CASE WHEN DATEDIFF(second, IMPRESSION_TIME, PRODUCT_ADDED_TIME)/60 BETWEEN 0 AND 2880 THEN A.USER_ID ELSE NULL END AS PRODUCT_USER_ID,
    CASE WHEN DATEDIFF(second, IMPRESSION_TIME, PRODUCT_ADDED_TIME)/60 BETWEEN 0 AND 2880 THEN A.POC_ID ELSE NULL END AS PRODUCT_POC_ID
FROM CLICKS_JOINED A
LEFT JOIN PRODUCT_ADDED B
    ON A.COUNTRY = B.COUNTRY
    AND A.POC_ID = B.POC_ID
    AND A.USER_ID = B.USER_ID
)

,
ORDER_COMPLETED AS (
SELECT COUNTRY,
    ORDER_ITEM_ID,
    ORDER_ID,
    POC_ID,
    RECEIVED_AT AS ORDER_COMPLETED_TIME,
    LOWER(PRODUCT_BRAND) AS BRAND,
    PRODUCT_QUANTITY,
    PRODUCT_REVENUE,
    PRODUCT_SKU,
    PRODUCT_NAME,
    PRODUCT_RECOMMENDATION_TYPE
FROM WH.DATAMARTS_DIGITAL_COMMS.FACT_GLOBAL_ORDER_ITEMS
WHERE ORDER_COMPLETED_TIME >= DATEADD('DAY', -31, CURRENT_DATE)
),
-- SELECT EVENT ID, POC_ID, TIMESTAMP, BRAND, QUANTITY, REVENUE
CLEAN_ORDER_COMPLETED_5D AS (
SELECT DISTINCT A.COUNTRY,
    CHANNEL,
    CAMPAIGN_ID,
    CAMPAIGN_NAME,
    CAMPAIGN_TYPE,
    A.USER_ID,
    A.CLICK_USER_ID,
    A.PRODUCT_USER_ID,
    A.POC_ID,
    A.CLICK_POC_ID,
    A.PRODUCT_POC_ID,
    SEND_ID,
    CLICK_ID,
    PRODUCT_ADDED_ID,
    IMPRESSION_TIME,
    CLICK_TIME,
    PRODUCT_ADDED_TIME,
    CASE WHEN DATEDIFF(second, PRODUCT_ADDED_TIME, ORDER_COMPLETED_TIME)/60 BETWEEN 0 AND 7200 THEN ORDER_COMPLETED_TIME ELSE NULL END AS ORDER_COMPLETED_TIME,
    CASE WHEN DATEDIFF(second, PRODUCT_ADDED_TIME, ORDER_COMPLETED_TIME)/60 BETWEEN 0 AND 7200 THEN ORDER_ID ELSE NULL END AS ORDER_ID,
    CASE WHEN DATEDIFF(second, PRODUCT_ADDED_TIME, ORDER_COMPLETED_TIME)/60 BETWEEN 0 AND 7200 THEN ORDER_ITEM_ID ELSE NULL END AS ORDER_ITEM_ID,
    CASE WHEN DATEDIFF(second, PRODUCT_ADDED_TIME, ORDER_COMPLETED_TIME)/60 BETWEEN 0 AND 7200 THEN PRODUCT_QUANTITY ELSE NULL END AS ORDER_PRODUCT_QUANTITY,
    CASE WHEN DATEDIFF(second, PRODUCT_ADDED_TIME, ORDER_COMPLETED_TIME)/60 BETWEEN 0 AND 7200 THEN PRODUCT_REVENUE ELSE NULL END AS ORDER_PRODUCT_REVENUE,
    CASE WHEN DATEDIFF(second, PRODUCT_ADDED_TIME, ORDER_COMPLETED_TIME)/60 BETWEEN 0 AND 7200 THEN A.POC_ID ELSE NULL END AS ORDER_POC_ID
FROM PRODUCT_ADDED_48H A
LEFT JOIN ORDER_COMPLETED B
    ON A.COUNTRY = B.COUNTRY
    AND A.POC_ID = B.POC_ID

), 

-- Create a CTE with Stage Orders data
-- SELECT COUNTRY, POC_ID, ORDER_ID, STATUS, DELIVERY_DATE FROM STAGE.ORDERS.ORDERS
-- SELECT SKU, TOTAL FROM STAGE.ORDERS.ORDERS_ITEMS
-- SELECT BRAND FROM STAGE.PRODUCT.ITEMS
-- ONLY SELECT ITEMS WHERE BRAND IS IN THE SELECTED BRANDS FROM CAMPAIGN METADATA
ORDER_ITEMS AS (
SELECT OO.COUNTRY,
    OO.ACCOUNT_ID,
    OO.ORDER_ID,
    OO.STATUS,
    OI.PRODUCT_SKU,
    PI.BRAND_NAME,
    OI.TOTAL,
    OO.DELIVERY_DATE
FROM 		STAGE.ORDERS.ORDERS OO
INNER JOIN 	STAGE.ORDERS.ORDER_ITEMS OI
	ON 		OO.ORDER_ID = OI.ORDER_ID 
	AND 	OO.COUNTRY = OI.COUNTRY
INNER JOIN 	"STAGE".PRODUCT.ITEMS PI
	ON		PI.PRODUCT_SKU = OI.PRODUCT_SKU 
	AND		PI.COUNTRY = OI.COUNTRY
WHERE STATUS = 'DELIVERED'
),

DELIVERS AS (
SELECT DISTINCT A.COUNTRY,
    CHANNEL,
    CAMPAIGN_ID,
    CAMPAIGN_NAME,
    CAMPAIGN_TYPE,
    OI.PRODUCT_SKU,
    A.USER_ID,
    A.CLICK_USER_ID,
    A.PRODUCT_USER_ID,
    A.POC_ID,
    A.CLICK_POC_ID,
    A.PRODUCT_POC_ID,
    ORDER_POC_ID,
    OI.ACCOUNT_ID AS DELIVERED_POC_ID,
    SEND_ID,
    CLICK_ID,
    PRODUCT_ADDED_ID,
    ORDER_ITEM_ID,
    A.ORDER_ID,
    OI.ORDER_ID AS DELIVERED_ORDER_ID,
    IMPRESSION_TIME,
    CLICK_TIME,
    PRODUCT_ADDED_TIME,
    ORDER_COMPLETED_TIME,
    DELIVERY_DATE,
    ORDER_PRODUCT_QUANTITY,
    ORDER_PRODUCT_REVENUE,
    OI.TOTAL AS DELIVERY_TOTAL
FROM CLEAN_ORDER_COMPLETED_5D A  
LEFT JOIN ORDER_ITEMS OI
    ON A.COUNTRY = OI.COUNTRY
    AND A.POC_ID = OI.ACCOUNT_ID
    AND A.ORDER_ID = OI.ORDER_ID
)

SELECT DISTINCT * FROM DELIVERS
